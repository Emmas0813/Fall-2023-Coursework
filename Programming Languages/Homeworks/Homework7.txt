# Emma Smith
# Prog Lang Fall 2023
# Homework7

# Problem 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# generator that yields all squares of primes starting from 4
def squared_of_primes():
    i = 2 # start at 4
    while True:
        if is_prime(i):
            yield i * i
        i += 1

# helper methods ---------------------
def is_prime(n):
    if n < 2:
        return False
    i = 2
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

# Problem 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# generator that on an input positive integer n, yields all S2SP numbers in
# the increasing order that are greater than n
def s2sp(n):
    i = 0 # sum
    while True:
        if i > n and is_s2sp(i): # if sum > given integer and sum is a s2sp
            yield i
        i += 1
# helper functions -------------------
def is_s2sp(n):
    # for each i until the square root of number...
    for i in range(2, int(n**0.5)):
        p1 = i # first prime number
        p2 = int((n - i**2)**0.5) # take remainder of i, subtract from n and take square root to find other prime
        # if both are prime, return True
        if is_prime(p1) and is_prime(p2):
            if p1**2 + p2**2 == n:
                return True
    return False

# Using generator ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

s2sp_gen = s2sp(113565118)
for _ in range(20):
    print(next(s2sp_gen))

# 113565530
# 113565602
# 113565842
# 113566130
# 113566538
# 113566802
# 113566850
# 113568338
# 113568362
# 113568410
# 113568458
# 113568650
# 113568962
# 113569010
# 113569250
# 113569322
# 113569370
# 113569490
# 113570210
# 113570858